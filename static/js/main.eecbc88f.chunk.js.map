{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/sort.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","chooseTodo","selectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","onSelect","selectValue","setQuery","query","value","onChange","e","target","event","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortEnum","TodoModal","deleteSelection","useState","currUser","setCurrUser","useEffect","userId","user","href","email","name","App","visibleToDos","setVisibleToDos","setSelectedTodo","select","setSelect","getQuery","str","toLowerCase","includes","filteredTodos","filter","ACTIVE","ALL","COMPLETED","getSelectedTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eecbc88f.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  chooseTodo: (value: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  chooseTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          key={todo.id}\n          data-cy=\"todo\"\n          className={classNames(\n            { 'has-background-info-light': selectedTodo?.id === todo.id },\n          )}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => chooseTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i\n                  className={classNames(\n                    'far',\n                    { 'fa-eye-slash': selectedTodo?.id === todo.id },\n                    { 'fa-eye': selectedTodo?.id !== todo.id },\n                  )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","type Props = {\n  onSelect: (value: string) => void;\n  selectValue: string;\n  setQuery: (value: string) => void;\n  query: string;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSelect,\n  selectValue,\n  setQuery,\n  query,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectValue}\n            onChange={(e) => onSelect(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={query}\n          onChange={event => {\n            setQuery(event.target.value);\n          }}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              onClick={() => setQuery('')}\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n            />\n          </span>\n\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortEnum {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo;\n  deleteSelection: () => void\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  deleteSelection,\n}) => {\n  const [currUser, setCurrUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedTodo.userId)\n      .then(user => setCurrUser(user));\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={deleteSelection}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames(\n                  { 'has-text-danger': !selectedTodo.completed },\n                  { 'has-text-success': selectedTodo.completed },\n                )}\n              >\n                {selectedTodo.completed ? 'Done' : 'Planned'}\n\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${currUser.email}`}>\n                {currUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortEnum } from './types/sort';\n\nexport const App: React.FC = () => {\n  const [visibleToDos, setVisibleToDos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [select, setSelect] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const getQuery = (str: string) => str.toLowerCase().includes(query.toLowerCase());\n\n  const getSelectedTodos = (todos: Todo[]) => {\n    const filteredTodos = todos.filter(({ completed, title }) => {\n      switch (select) {\n        case SortEnum.ACTIVE:\n          return !completed && getQuery(title);\n\n        case SortEnum.ALL:\n          return getQuery(title);\n\n        case SortEnum.COMPLETED:\n          return completed && getQuery(title);\n\n        default:\n          return getQuery(title);\n      }\n    });\n\n    setVisibleToDos(filteredTodos);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => getSelectedTodos(todos));\n  }, [select, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelect={setSelect}\n                selectValue={select}\n                query={query}\n                setQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {visibleToDos.length || query\n                ? (\n                  <TodoList\n                    todos={visibleToDos}\n                    chooseTodo={setSelectedTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          deleteSelection={() => setSelectedTodo(null)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}